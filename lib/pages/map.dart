// ignore_for_file: prefer_collection_literals, prefer_const_constructors

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:lottie/lottie.dart';
import 'package:syncfusion_flutter_maps/maps.dart';
import 'package:animated_button_bar/animated_button_bar.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class CollegeMap extends StatefulWidget {
  const CollegeMap({super.key});

  @override
  CollegeMapState createState() => CollegeMapState();
}

class CollegeMapState extends State<CollegeMap>
    with SingleTickerProviderStateMixin {
  late List<dynamic> data;

  late MapZoomPanBehavior _zoomPanBehavior;
  late List<List<MapLatLng>> _acadAreapolygons;
  late List<List<MapLatLng>> _pineDrongopolygon;
  late List<List<MapLatLng>> _hostelspolygon;
  late List<List<MapLatLng>> _alderpolygon;
  late List<List<MapLatLng>> _oakpolygon;
  late List<List<MapLatLng>> _monalpolygon;
  late List<List<MapLatLng>> _tragopolygon;
  late List<List<MapLatLng>> _greenpolygon;
  late List<List<MapLatLng>> _redstartpolygon;
  late List<List<MapLatLng>> _staffpolygon;
  late List<List<MapLatLng>> _megastarpolygon;
  late List<List<MapLatLng>> _oneBitepolygon;
  
  late List<List<MapLatLng>> _allMesspolygon;
  late List<List<MapLatLng>> _allCanteenpolygon;
  late List<List<MapLatLng>> _allStorespolygon;
  bool showMessBar = false;
  bool showCanteenBar = false;
  bool showStoresBar = false;

  late int _selectedIndex;
  MapLatLng northeast = const MapLatLng(31.795394685781723, 77.04033648270236);
  MapLatLng southwest = const MapLatLng(31.767796397152324, 76.97291146274516);
  List<bool> pressedList = List.filled(17, false);

  late AnimationController _controller;
  late Animation<Color?> _animation;

  @override
  void initState() {
    super.initState();
    fetchData();

    _selectedIndex = -1;
    _acadAreapolygons = [
      [
        MapLatLng(31.7805766917227, 76.99697733970822),
        MapLatLng(31.780492814845132, 76.99686579929943),
        MapLatLng(31.780383410106623, 76.99691727948829),
        MapLatLng(31.78027035840765, 76.996870089315),
        MapLatLng(31.78006978247268, 76.99698162972385),
        MapLatLng(31.780219302756166, 76.9974878515751),
        MapLatLng(31.780551163985933, 76.99824289433957),
        MapLatLng(31.780737151626298, 76.99804984363288),
        MapLatLng(31.780810087854277, 76.99813993396191),
        MapLatLng(31.780926785698767, 76.99804984363288),
        MapLatLng(31.7805766917227, 76.99697733970822)
      ],
      [
        MapLatLng(31.781051470812496, 76.99836301570832),
        MapLatLng(31.781050729937828, 76.99834527495781),
        MapLatLng(31.781048514448898, 76.99832770506127),
        MapLatLng(31.781044845682164, 76.99831047522723),
        MapLatLng(31.781039758970053, 76.99829375138913),
        MapLatLng(31.781033303300585, 76.99827769460737),
        MapLatLng(31.781025540845672, 76.99826245951806),
        MapLatLng(31.781016546362327, 76.99824819284383),
        MapLatLng(31.781006406472684, 76.99823503198083),
        MapLatLng(31.780995218829776, 76.99822310367539),
        MapLatLng(31.780983091177085, 76.99821252280358),
        MapLatLng(31.780970140310878, 76.99820339126471),
        MapLatLng(31.780956490955404, 76.99819579700012),
        MapLatLng(31.780942274561678, 76.99818981314614),
        MapLatLng(31.7809276280416, 76.99818549732994),
        MapLatLng(31.780912692449302, 76.99818289111442),
        MapLatLng(31.780897611622837, 76.99818201959805),
        MapLatLng(31.78088253079883, 76.99818289117317),
        MapLatLng(31.780867595213824, 76.99818549744519),
        MapLatLng(31.78085294870556, 76.99818981331345),
        MapLatLng(31.78083873232776, 76.99819579721304),
        MapLatLng(31.780825082991687, 76.99820339151509),
        MapLatLng(31.780812132147606, 76.99821252308179),
        MapLatLng(31.780800004518923, 76.99822310397074),
        MapLatLng(31.780788816900976, 76.99823503228194),
        MapLatLng(31.78077867703631, 76.99824819313919),
        MapLatLng(31.78076968257698, 76.99826245979627),
        MapLatLng(31.780761920144194, 76.99827769485775),
        MapLatLng(31.780755464494124, 76.99829375160208),
        MapLatLng(31.780750377797922, 76.99831047539452),
        MapLatLng(31.78074670904302, 76.99832770517651),
        MapLatLng(31.780744493561375, 76.99834527501656),
        MapLatLng(31.78074375268917, 76.99836301570832),
        MapLatLng(31.780744493561375, 76.9983807564001),
        MapLatLng(31.78074670904302, 76.99839832624014),
        MapLatLng(31.780750377797922, 76.99841555602212),
        MapLatLng(31.780755464494124, 76.99843227981458),
        MapLatLng(31.780761920144194, 76.9984483365589),
        MapLatLng(31.78076968257698, 76.99846357162038),
        MapLatLng(31.78077867703631, 76.99847783827747),
        MapLatLng(31.780788816900976, 76.99849099913472),
        MapLatLng(31.780800004518923, 76.99850292744591),
        MapLatLng(31.780812132147606, 76.99851350833485),
        MapLatLng(31.780825082991687, 76.99852263990155),
        MapLatLng(31.78083873232776, 76.9985302342036),
        MapLatLng(31.78085294870556, 76.99853621810321),
        MapLatLng(31.780867595213824, 76.99854053397146),
        MapLatLng(31.78088253079883, 76.99854314024347),
        MapLatLng(31.780897611622837, 76.99854401181861),
        MapLatLng(31.780912692449302, 76.99854314030223),
        MapLatLng(31.7809276280416, 76.99854053408671),
        MapLatLng(31.780942274561678, 76.9985362182705),
        MapLatLng(31.780956490955404, 76.99853023441653),
        MapLatLng(31.780970140310878, 76.99852264015193),
        MapLatLng(31.780983091177085, 76.99851350861306),
        MapLatLng(31.780995218829776, 76.99850292774126),
        MapLatLng(31.781006406472684, 76.99849099943583),
        MapLatLng(31.781016546362327, 76.99847783857281),
        MapLatLng(31.781025540845672, 76.9984635718986),
        MapLatLng(31.781033303300585, 76.99844833680928),
        MapLatLng(31.781039758970053, 76.99843228002752),
        MapLatLng(31.781044845682164, 76.99841555618943),
        MapLatLng(31.781048514448898, 76.99839832635537),
        MapLatLng(31.781050729937828, 76.99838075645884),
        MapLatLng(31.781051470812496, 76.99836301570832)
      ],
      [
        MapLatLng(31.78121123657725, 76.99869334691721),
        MapLatLng(31.781193002604567, 76.99863328669721),
        MapLatLng(31.780952313832103, 76.99875340713726),
        MapLatLng(31.780886671331018, 76.99865902679267),
        MapLatLng(31.78068609673278, 76.99872337702817),
        MapLatLng(31.78071162443318, 76.9988134673572),
        MapLatLng(31.780831969210922, 76.99941406955514),
        MapLatLng(31.780875730909074, 76.9999074213597),
        MapLatLng(31.781156534649185, 76.9997830109042),
        MapLatLng(31.781233117339667, 76.99983878110862),
        MapLatLng(31.781440984321677, 76.99979159093539),
        MapLatLng(31.781349814650298, 76.99918669872386),
        MapLatLng(31.78121123657725, 76.99869334691721)
      ],
      [
        MapLatLng(31.78027032929592, 76.99504545677148),
        MapLatLng(31.780269192472012, 76.99501823500003),
        MapLatLng(31.78026579294864, 76.9949912753911),
        MapLatLng(31.780260163465307, 76.99496483758239),
        MapLatLng(31.780252358237412, 76.99493917618621),
        MapLatLng(31.780242452434106, 76.9949145383374),
        MapLatLng(31.780230541454355, 76.99489116131315),
        MapLatLng(31.780216740008147, 76.99486927024795),
        MapLatLng(31.78020118101178, 76.99484907596529),
        MapLatLng(31.780184014307718, 76.99483077294737),
        MapLatLng(31.780165405221577, 76.99481453746203),
        MapLatLng(31.780145532969833, 76.99480052586532),
        MapLatLng(31.780124588933884, 76.9947888730956),
        MapLatLng(31.780102774816896, 76.99477969137418),
        MapLatLng(31.780080300701286, 76.99477306912448),
        MapLatLng(31.780057383025483, 76.99476907012063),
        MapLatLng(31.780034242499465, 76.9947677328733),
        MapLatLng(31.780011101979245, 76.99476907025893),
        MapLatLng(31.779988184320583, 76.99477306939579),
        MapLatLng(31.779965710232826, 76.99477969176806),
        MapLatLng(31.779943896153316, 76.99478887359693),
        MapLatLng(31.77992295216303, 76.99480052645481),
        MapLatLng(31.779903079963386, 76.99481453811704),
        MapLatLng(31.77988447093377, 76.99483077364272),
        MapLatLng(31.779867304288505, 76.99484907667427),
        MapLatLng(31.779851745350918, 76.99486927094331),
        MapLatLng(31.779837943961244, 76.99489116196817),
        MapLatLng(31.779826033033594, 76.99491453892689),
        MapLatLng(31.779816127275943, 76.99493917668755),
        MapLatLng(31.779808322085533, 76.99496483797628),
        MapLatLng(31.779802692630046, 76.99499127566241),
        MapLatLng(31.77979929312382, 76.99501823513835),
        MapLatLng(31.779798156305706, 76.99504545677148),
        MapLatLng(31.77979929312382, 76.99507267840463),
        MapLatLng(31.779802692630046, 76.99509963788056),
        MapLatLng(31.779808322085533, 76.9951260755667),
        MapLatLng(31.779816127275943, 76.99515173685543),
        MapLatLng(31.779826033033594, 76.9951763746161),
        MapLatLng(31.779837943961244, 76.99519975157482),
        MapLatLng(31.779851745350918, 76.99522164259967),
        MapLatLng(31.779867304288505, 76.9952418368687),
        MapLatLng(31.77988447093377, 76.99526013990025),
        MapLatLng(31.779903079963386, 76.99527637542593),
        MapLatLng(31.77992295216303, 76.99529038708818),
        MapLatLng(31.779943896153316, 76.99530203994604),
        MapLatLng(31.779965710232826, 76.99531122177491),
        MapLatLng(31.779988184320583, 76.9953178441472),
        MapLatLng(31.780011101979245, 76.99532184328405),
        MapLatLng(31.780034242499465, 76.99532318066967),
        MapLatLng(31.780057383025483, 76.99532184342235),
        MapLatLng(31.780080300701286, 76.99531784441851),
        MapLatLng(31.780102774816896, 76.9953112221688),
        MapLatLng(31.780124588933884, 76.99530204044737),
        MapLatLng(31.780145532969833, 76.99529038767767),
        MapLatLng(31.780165405221577, 76.99527637608094),
        MapLatLng(31.780184014307718, 76.9952601405956),
        MapLatLng(31.78020118101178, 76.99524183756398),
        MapLatLng(31.780216740008147, 76.99522164329496),
        MapLatLng(31.780230541454355, 76.99519975232003),
        MapLatLng(31.780242452434106, 76.99517637536132),
        MapLatLng(31.780252358237412, 76.99515173760264),
        MapLatLng(31.780260163465307, 76.99512607531392),
        MapLatLng(31.78026579294864, 76.99509963762501),
        MapLatLng(31.780269192472012, 76.995072678149),
        MapLatLng(31.78027032929592, 76.99504545677148)
      ],
      [
        MapLatLng(31.780390044811696, 76.99536339671556),
        MapLatLng(31.780345569635713, 76.99523461091547),
        MapLatLng(31.77991108024777, 76.99542376505946),
        MapLatLng(31.779982925090067, 76.9964862479111),
        MapLatLng(31.779900816693768, 76.99694102276754),
        MapLatLng(31.78029425209766, 76.9968363843061),
        MapLatLng(31.78028740975735, 76.99671967217444),
        MapLatLng(31.780523470212913, 76.99663515649371),
        MapLatLng(31.78042083530586, 76.99592281003527),
        MapLatLng(31.780390044811696, 76.99536339671556)
      ]
    ];
    _hostelspolygon = [
      [
        const MapLatLng(31.78081750506972, 76.99527171047151),
        const MapLatLng(31.780625247681996, 76.99513677076646),
        const MapLatLng(31.780468533381594, 76.99574114860252),
        const MapLatLng(31.78056223887181, 76.99580386705713),
        const MapLatLng(31.78067533157774, 76.99581336985307),
        const MapLatLng(31.780736724703672, 76.99541805353351),
        const MapLatLng(31.78081750506972, 76.99527171047151),
      ],
      [
        const MapLatLng(31.780665637922908, 76.99584187824252),
        const MapLatLng(31.780592935477046, 76.99582097208975),
        const MapLatLng(31.780473380219476, 76.99590269613793),
        const MapLatLng(31.780634941341788, 76.99639874209737),
        const MapLatLng(31.780793270967237, 76.99632271972848),
        const MapLatLng(31.780665637922908, 76.99584187824252),
      ],
      [
        const MapLatLng(31.780773467412033, 76.99564270954261),
        const MapLatLng(31.780969863173098, 76.9961604759252),
        const MapLatLng(31.7811329414793, 76.99609859149689),
        const MapLatLng(31.781054032572342, 76.99578916942187),
        const MapLatLng(31.781017208432672, 76.99578916942187),
        const MapLatLng(31.780952327769043, 76.99553544326608),
        const MapLatLng(31.780773467412033, 76.99564270954261),
      ],
      [
        const MapLatLng(31.78092462978519, 76.99543250087999),
        const MapLatLng(31.781048815013477, 76.99558641572276),
        const MapLatLng(31.781153041772882, 76.995823809804),
        const MapLatLng(31.78130827289894, 76.99568554731775),
        const MapLatLng(31.78113530105618, 76.99544032705825),
        const MapLatLng(31.781039944645826, 76.99528380348818),
        const MapLatLng(31.78092462978519, 76.99543250087999),
      ],
      [
        const MapLatLng(31.781006243751932, 76.99619763315513),
        const MapLatLng(31.781056970576927, 76.9967858260211),
        const MapLatLng(31.78119221547898, 76.99680228456367),
        const MapLatLng(31.78129481503943, 76.99671816360251),
        const MapLatLng(31.781257506161836, 76.99659746762029),
        const MapLatLng(31.78122486088212, 76.99659381016642),
        const MapLatLng(31.781173561133244, 76.99618051786365),
        const MapLatLng(31.781006243751932, 76.99619763315513),
      ],
      [
        const MapLatLng(31.780716098373432, 76.99679213040753),
        const MapLatLng(31.780817712821545, 76.99733243597467),
        const MapLatLng(31.780825841972273, 76.99736829696371),
        const MapLatLng(31.780998586260992, 76.99732287304454),
        const MapLatLng(31.780907133442113, 76.99696187242154),
        const MapLatLng(31.78085632628209, 76.99676344161605),
        const MapLatLng(31.780716098373432, 76.99679213040753),
      ],
      [
        const MapLatLng(31.780992841743455, 76.99734646224033),
        const MapLatLng(31.780826194306968, 76.99742535641604),
        const MapLatLng(31.78101316458141, 76.99798717857709),
        const MapLatLng(31.781137133794076, 76.99793458245915),
        const MapLatLng(31.78105990709045, 76.99764769454788),
        const MapLatLng(31.7810781976316, 76.9976142242914),
        const MapLatLng(31.780992841743455, 76.99734646224033),
      ],
      [
        const MapLatLng(31.78105787480797, 76.99687309718507),
        const MapLatLng(31.781043648530556, 76.99722214438737),
        const MapLatLng(31.781320038587594, 76.9975688006142),
        const MapLatLng(31.781448071936808, 76.99741340299528),
        const MapLatLng(31.781226553807826, 76.99715759460685),
        const MapLatLng(31.781246876594423, 76.99687070669563),
        const MapLatLng(31.78105787480797, 76.99687309718507),
      ],
      [
        const MapLatLng(31.781231027945537, 76.99597293591762),
        const MapLatLng(31.7814281515558, 76.996438848514),
        const MapLatLng(31.78163431708448, 76.99631120122916),
        const MapLatLng(31.78141368378256, 76.9958367788119),
        const MapLatLng(31.781231027945537, 76.99597293591762),
      ],
      [
        const MapLatLng(31.78161909031388, 76.99637918705707),
        const MapLatLng(31.78144186029644, 76.99646215779296),
        const MapLatLng(31.78151962452951, 76.99666852090616),
        const MapLatLng(31.78151962452951, 76.99691530566105),
        const MapLatLng(31.781763767626757, 76.99687062911005),
        const MapLatLng(31.781696854397083, 76.99655576580432),
        const MapLatLng(31.78161909031388, 76.99637918705707),
      ],
      [
        const MapLatLng(31.781485685756934, 76.99747410548594),
        const MapLatLng(31.781415266052235, 76.99761859481441),
        const MapLatLng(31.781603597701775, 76.99774767194663),
        const MapLatLng(31.781657640625994, 76.99802123840544),
        const MapLatLng(31.78183450815763, 76.99794610395571),
        const MapLatLng(31.78171004585579, 76.99760318261815),
        const MapLatLng(31.781485685756934, 76.99747410548594),
      ],
      [
        const MapLatLng(31.781849897346575, 76.99802878819787),
        const MapLatLng(31.78173799985528, 76.99805950298384),
        const MapLatLng(31.781655941609785, 76.99811873864451),
        const MapLatLng(31.781732404977348, 76.99832716041254),
        const MapLatLng(31.78178089391001, 76.99865185958868),
        const MapLatLng(31.7819692545211, 76.99863650219567),
        const MapLatLng(31.781849897346575, 76.99802878819787),
      ],
      [
        const MapLatLng(31.78132090634182, 76.99766647254211),
        const MapLatLng(31.78117535987917, 76.99784658500033),
        const MapLatLng(31.78134736931048, 76.99800001413206),
        const MapLatLng(31.781513707796194, 76.9982735182374),
        const MapLatLng(31.781621449610924, 76.99818457381349),
        const MapLatLng(31.78132090634182, 76.99766647254211),
      ],
      [
        const MapLatLng(31.78121505439138, 76.99794887108959),
        const MapLatLng(31.781105421887418, 76.99802002662904),
        const MapLatLng(31.781198042460034, 76.99840693487414),
        const MapLatLng(31.781300114003784, 76.99854702234256),
        const MapLatLng(31.781523158838198, 76.99845585430819),
        const MapLatLng(31.78121505439138, 76.99794887108959),
      ],
      [
        const MapLatLng(31.781276726099577, 76.99861411493174),
        const MapLatLng(31.7814294393703, 76.99919298429933),
        const MapLatLng(31.781625515298344, 76.99911314024882),
        const MapLatLng(31.78147845839085, 76.99853427087925),
        const MapLatLng(31.781276726099577, 76.99861411493174),
      ],
      [
        const MapLatLng(31.781960413618435, 76.99905994916793),
        const MapLatLng(31.78180984324152, 76.99908619054071),
        const MapLatLng(31.78194926026525, 76.99958149646795),
        const MapLatLng(31.782141655413312, 76.99951917320595),
        const MapLatLng(31.781960413618435, 76.99905994916793),
      ],
    ];
    _greenpolygon = [
      [
        const MapLatLng(31.779568843174843, 76.9955456547799),
        const MapLatLng(31.778946508833656, 76.99568850086996),
        const MapLatLng(31.778521497609063, 76.99706339448625),
        const MapLatLng(31.778521497609063, 76.9986882687611),
        const MapLatLng(31.77920455041044, 76.99975961443857),
        const MapLatLng(31.77967509496041, 77.0004917006496),
        const MapLatLng(31.78010010088454, 77.0006524025004),
        const MapLatLng(31.780494747492966, 77.00018815270874),
        const MapLatLng(31.78072242746208, 76.99945606649567),
        const MapLatLng(31.780464390121352, 76.99847399962601),
        const MapLatLng(31.78010010088454, 76.9980454613559),
        const MapLatLng(31.77999384958642, 76.99729551938412),
        const MapLatLng(31.779644737319728, 76.99690269263544),
        const MapLatLng(31.77970545259113, 76.99608132761654),
        const MapLatLng(31.779568843174843, 76.9955456547799)
      ],
      [
        const MapLatLng(31.780570640877997, 76.99268873297677),
        const MapLatLng(31.779339400991375, 76.99222448342096),
        const MapLatLng(31.77991619636471, 76.99133169535918),
        const MapLatLng(31.779976911458775, 76.99101029165553),
        const MapLatLng(31.779384937599474, 76.99101029165553),
        const MapLatLng(31.7780188296165, 76.99211734885449),
        const MapLatLng(31.777305409649472, 76.99320655029061),
        const MapLatLng(31.77665270145492, 76.99418861716026),
        const MapLatLng(31.777199155141474, 76.99502783793992),
        const MapLatLng(31.777700068183435, 76.99579563567443),
        const MapLatLng(31.778322410911954, 76.99458144390894),
        const MapLatLng(31.7795519049685, 76.99418861716026),
        const MapLatLng(31.779341160364837, 76.99383150169928),
        const MapLatLng(31.779720631403194, 76.99309941548614),
        const MapLatLng(31.779978670820043, 76.99265302145528),
        const MapLatLng(31.780570640877997, 76.99268873297677)
      ],
      [
        const MapLatLng(31.782109537583125, 77.00105314965322),
        const MapLatLng(31.781706984088316, 77.00078851348809),
        const MapLatLng(31.78097291143932, 77.00081636992729),
        const MapLatLng(31.780357233110934, 77.0014431397907),
        const MapLatLng(31.780357233110934, 77.00201419677899),
        const MapLatLng(31.780700592684227, 77.00187491458621),
        const MapLatLng(31.780830832189054, 77.00142921157192),
        const MapLatLng(31.78119786980548, 77.00134564225601),
        const MapLatLng(31.78167146457848, 77.0014431397907),
        const MapLatLng(31.782109537583125, 77.00105314965322)
      ],
      [
        const MapLatLng(31.778167784849458, 76.99559050320602),
        const MapLatLng(31.777800735207208, 76.99611977553457),
        const MapLatLng(31.776995588952957, 76.99641226813895),
        const MapLatLng(31.776806141757064, 76.99699725334438),
        const MapLatLng(31.777185036397398, 76.99755438208808),
        const MapLatLng(31.777777055170972, 76.99776330537634),
        const MapLatLng(31.778298028557032, 76.99692761222468),
        const MapLatLng(31.778499312943325, 76.99543729276866),
        const MapLatLng(31.778167784849458, 76.99559050320602)
      ]
    ];
    _staffpolygon = [
      [
        const MapLatLng(31.78173510355316, 76.99438131355623),
        const MapLatLng(31.781605785251926, 76.9947362794021),
        const MapLatLng(31.781740851028843, 76.9950574389764),
        const MapLatLng(31.781660386334835, 76.99533126977104),
        const MapLatLng(31.78174947224238, 76.99561862307382),
        const MapLatLng(31.78172360860077, 76.9956794743614),
        const MapLatLng(31.78191327513855, 76.99608514961375),
        const MapLatLng(31.78214317345092, 76.99630489037492),
        const MapLatLng(31.78231559681045, 76.99655505678072),
        const MapLatLng(31.782499514705904, 76.99634545790053),
        const MapLatLng(31.782269617279425, 76.99611557525833),
        const MapLatLng(31.78192189633532, 76.99576737066644),
        const MapLatLng(31.78192189633532, 76.99576737066644),
        const MapLatLng(31.78196787603926, 76.9948951688757),
        const MapLatLng(31.78173510355316, 76.99438131355623)
      ],
      [
        const MapLatLng(31.782534036887412, 76.99643452965506),
        const MapLatLng(31.782378889846143, 76.99650594830769),
        const MapLatLng(31.78238563537488, 76.99656744770323),
        const MapLatLng(31.78231986644711, 76.99660117317717),
        const MapLatLng(31.78243116768259, 76.9969166055605),
        const MapLatLng(31.78269592917448, 76.99682336454242),
        const MapLatLng(31.782534036887412, 76.99643452965506)
      ],
      [
        const MapLatLng(31.782679065407464, 76.99695231488778),
        const MapLatLng(31.782547527922546, 76.99696620184761),
        const MapLatLng(31.78252223223072, 76.99692255711471),
        const MapLatLng(31.782432854063842, 76.99697215340177),
        const MapLatLng(31.782439723471725, 76.99743056746087),
        const MapLatLng(31.782569574732022, 76.99739684198687),
        const MapLatLng(31.782589811275855, 76.99733534259138),
        const MapLatLng(31.78269605305715, 76.99732740718571),
        const MapLatLng(31.782679065407464, 76.99695231488778)
      ],
      [
        const MapLatLng(31.782726926594066, 76.9981392863969),
        const MapLatLng(31.782634175870726, 76.9981710280195),
        const MapLatLng(31.78262743035934, 76.99808969010985),
        const MapLatLng(31.782514442980357, 76.99817499572231),
        const MapLatLng(31.782585270906083, 76.99861342689672),
        const MapLatLng(31.782723553842217, 76.9986074753424),
        const MapLatLng(31.782723553842217, 76.99850629891876),
        const MapLatLng(31.78278426335845, 76.99850233121407),
        const MapLatLng(31.782726926594066, 76.9981392863969)
      ],
      [
        const MapLatLng(31.78153427098117, 76.99480051080866),
        const MapLatLng(31.78142976034023, 76.99480051080866),
        const MapLatLng(31.7813385509575, 76.99519840420129),
        const MapLatLng(31.7814449618957, 76.99530570129735),
        const MapLatLng(31.781490566545386, 76.99525652346142),
        const MapLatLng(31.78155517309446, 76.99530123058514),
        const MapLatLng(31.781650182643503, 76.99494804431413),
        const MapLatLng(31.78153427098117, 76.99488545434178),
        const MapLatLng(31.78153427098117, 76.99480051080866)
      ],
      [
        const MapLatLng(31.78152667021061, 76.99537723269395),
        const MapLatLng(31.781414558783126, 76.99538617411821),
        const MapLatLng(31.781393656637164, 76.99531687807769),
        const MapLatLng(31.78130434741591, 76.99534370235068),
        const MapLatLng(31.781433560729113, 76.99577512608653),
        const MapLatLng(31.781558973478212, 76.99595395457919),
        const MapLatLng(31.781600777690684, 76.99619537304204),
        const MapLatLng(31.781823099772737, 76.99604783953657),
        const MapLatLng(31.78152667021061, 76.99537723269395)
      ],
      [
        const MapLatLng(31.78178699636814, 76.99624455097455),
        const MapLatLng(31.781785096180982, 76.9966670332862),
        const MapLatLng(31.781997916906377, 76.99662456152066),
        const MapLatLng(31.781967513975573, 76.9962199620577),
        const MapLatLng(31.78178699636814, 76.99624455097455)
      ],
      [
        const MapLatLng(31.78204209519167, 76.99745880123629),
        const MapLatLng(31.781856018263525, 76.99751407874277),
        const MapLatLng(31.78194059873165, 76.99792534338576),
        const MapLatLng(31.782077806882228, 76.99787669918186),
        const MapLatLng(31.78204209519167, 76.99745880123629)
      ],
      [
        const MapLatLng(31.782117277681976, 76.9979120767847),
        const MapLatLng(31.781933080471205, 76.99796956539132),
        const MapLatLng(31.782028938249013, 76.99847148514573),
        const MapLatLng(31.782209376149808, 76.99830123042807),
        const MapLatLng(31.782117277681976, 76.99810665360638),
        const MapLatLng(31.782117277681976, 76.9979120767847)
      ],
      [
        const MapLatLng(31.78222514209442, 76.99852355890494),
        const MapLatLng(31.782040945098473, 76.99853903660613),
        const MapLatLng(31.782029667719783, 76.99895693455176),
        const MapLatLng(31.782232660332014, 76.99891934584667),
        const MapLatLng(31.78222514209442, 76.99852355890494)
      ],
      [
        const MapLatLng(31.782227651617163, 76.99897294388256),
        const MapLatLng(31.782047213752065, 76.99898842158387),
        const MapLatLng(31.782150589654975, 76.99936873082646),
        const MapLatLng(31.78229531572559, 76.99929576451854),
        const MapLatLng(31.782227651617163, 76.99897294388256)
      ],
      [
        const MapLatLng(31.78233289605835, 76.99943069128165),
        const MapLatLng(31.78218629048652, 76.99954124629454),
        const MapLatLng(31.782336655172386, 76.99993482213614),
        const MapLatLng(31.782505815152106, 76.99981763382476),
        const MapLatLng(31.78233289605835, 76.99943069128165)
      ],
      [
        const MapLatLng(31.782378005417826, 76.99912113724878),
        const MapLatLng(31.782434392086913, 76.99948596878806),
        const MapLatLng(31.782626106504722, 76.99943290238184),
        const MapLatLng(31.78257535860918, 76.99904595984077),
        const MapLatLng(31.782378005417826, 76.99912113724878)
      ],
      [
        const MapLatLng(31.782530249345072, 76.99867007279846),
        const MapLatLng(31.782424994311413, 76.99869218380229),
        const MapLatLng(31.782409957867742, 76.99859047319012),
        const MapLatLng(31.782317859599715, 76.99864796179673),
        const MapLatLng(31.782329136944128, 76.99904153764038),
        const MapLatLng(31.782470103625982, 76.99907249304283),
        const MapLatLng(31.782496417383, 76.99900394893535),
        const MapLatLng(31.782560322189937, 76.99897078243265),
        const MapLatLng(31.782530249345072, 76.99867007279846)
      ],
      [
        const MapLatLng(31.782379469069014, 76.99769797210536),
        const MapLatLng(31.78218399501975, 76.9976692278031),
        const MapLatLng(31.782215947536685, 76.99808491464853),
        const MapLatLng(31.782355034835348, 76.99853819019899),
        const MapLatLng(31.782507278800423, 76.99845859058854),
        const MapLatLng(31.782418939739998, 76.99805617034627),
        const MapLatLng(31.782379469069014, 76.99769797210536)
      ],
      [
        const MapLatLng(31.782362007736765, 76.99722095290406),
        const MapLatLng(31.782264270619052, 76.99723200900416),
        const MapLatLng(31.782249234149248, 76.99713693169457),
        const MapLatLng(31.78214397892158, 76.99721653070367),
        const MapLatLng(31.782155256287197, 76.99759462884401),
        const MapLatLng(31.782271788979287, 76.9976277953487),
        const MapLatLng(31.782296223234965, 76.99754819573826),
        const MapLatLng(31.78240523752649, 76.99753050693693),
        const MapLatLng(31.782362007736765, 76.99722095290406)
      ],
      [
        const MapLatLng(31.78210845111137, 76.99955913978101),
        const MapLatLng(31.78192068913569, 76.99961257881813),
        const MapLatLng(31.782135706850212, 77.00025740986405),
        const MapLatLng(31.782335582023492, 77.00014696918748),
        const MapLatLng(31.78210845111137, 76.99955913978101)
      ],
      [
        const MapLatLng(31.781614818004144, 76.99917081611198),
        const MapLatLng(31.781396770639446, 76.99928125678855),
        const MapLatLng(31.78156030621136, 76.99986196099013),
        const MapLatLng(31.781748068918745, 76.99977289592778),
        const MapLatLng(31.781614818004144, 76.99917081611198)
      ],
      [
        const MapLatLng(31.781775324763828, 76.99980139674835),
        const MapLatLng(31.78157847681277, 76.99998665207619),
        const MapLatLng(31.781790466896794, 77.00037141314294),
        const MapLatLng(31.78199942807487, 77.00052104244713),
        const MapLatLng(31.78214176367983, 77.00032866191299),
        const MapLatLng(31.78192068913569, 77.0000864049457),
        const MapLatLng(31.781775324763828, 76.99980139674835)
      ]
    ];
    _alderpolygon = [
      [
        const MapLatLng(31.78148209590543, 77.00008825150178),
        const MapLatLng(31.781481347100467, 77.00007032077157),
        const MapLatLng(31.781479107897, 77.00005256272497),
        const MapLatLng(31.781475399859897, 77.00003514838248),
        const MapLatLng(31.781470258699756, 77.00001824545453),
        const MapLatLng(31.781463733928987, 77.00000201672621),
        const MapLatLng(31.78145588838499, 76.99998661848961),
        const MapLatLng(31.78144679762496, 76.99997219903857),
        const MapLatLng(31.781436549198258, 76.99995889724052),
        const MapLatLng(31.78142524180319, 76.99994684119916),
        const MapLatLng(31.781412984336523, 76.99993614702066),
        const MapLatLng(31.78139989484471, 76.99992691769556),
        const MapLatLng(31.781386099387035, 76.99991924210688),
        const MapLatLng(31.781371730821594, 76.99991319417418),
        const MapLatLng(31.78135692752575, 76.99990883214174),
        const MapLatLng(31.78134183206351, 76.99990619801748),
        const MapLatLng(31.78132658981254, 76.99990531716867),
        const MapLatLng(31.78131134756408, 76.99990619807751),
        const MapLatLng(31.781296252109286, 76.99990883225945),
        const MapLatLng(31.78128144882552, 76.9999131943451),
        const MapLatLng(31.78126708027634, 76.9999192423244),
        const MapLatLng(31.78125328483848, 76.99992691795133),
        const MapLatLng(31.78124019536927, 76.99993614730487),
        const MapLatLng(31.781227937927127, 76.99994684150086),
        const MapLatLng(31.78121663055757, 76.99995889754814),
        const MapLatLng(31.781206382156373, 76.99997219934026),
        const MapLatLng(31.781197291420867, 76.9999866187738),
        const MapLatLng(31.78118944589948, 77.00000201698198),
        const MapLatLng(31.781182921148527, 77.00001824567205),
        const MapLatLng(31.781177780004647, 77.0000351485534),
        const MapLatLng(31.78117407197962, 77.00005256284268),
        const MapLatLng(31.781171832783595, 77.00007032083158),
        const MapLatLng(31.781171083981143, 77.00008825150178),
        const MapLatLng(31.781171832783595, 77.00010618217196),
        const MapLatLng(31.78117407197962, 77.00012394016086),
        const MapLatLng(31.781177780004647, 77.00014135445016),
        const MapLatLng(31.781182921148527, 77.00015825733149),
        const MapLatLng(31.78118944589948, 77.00017448602156),
        const MapLatLng(31.781197291420867, 77.00018988422974),
        const MapLatLng(31.781206382156373, 77.00020430366328),
        const MapLatLng(31.78121663055757, 77.0002176054554),
        const MapLatLng(31.781227937927127, 77.00022966150269),
        const MapLatLng(31.78124019536927, 77.00024035569868),
        const MapLatLng(31.78125328483848, 77.00024958505222),
        const MapLatLng(31.78126708027634, 77.00025726067915),
        const MapLatLng(31.78128144882552, 77.00026330865845),
        const MapLatLng(31.781296252109286, 77.0002676707441),
        const MapLatLng(31.78131134756408, 77.00027030492605),
        const MapLatLng(31.78132658981254, 77.00027118583488),
        const MapLatLng(31.78134183206351, 77.00027030498606),
        const MapLatLng(31.78135692752575, 77.0002676708618),
        const MapLatLng(31.781371730821594, 77.00026330882936),
        const MapLatLng(31.781386099387035, 77.00025726089667),
        const MapLatLng(31.78139989484471, 77.000249585308),
        const MapLatLng(31.781412984336523, 77.00024035598288),
        const MapLatLng(31.78142524180319, 77.0002296618044),
        const MapLatLng(31.781436549198258, 77.00021760576303),
        const MapLatLng(31.78144679762496, 77.00020430396499),
        const MapLatLng(31.78145588838499, 77.00018988451394),
        const MapLatLng(31.781463733928987, 77.00017448627734),
        const MapLatLng(31.781470258699756, 77.00015825754903),
        const MapLatLng(31.781475399859897, 77.00014135462106),
        const MapLatLng(31.781479107897, 77.00012394027858),
        const MapLatLng(31.781481347100467, 77.00010618223199),
        const MapLatLng(31.78148209590543, 77.00008825150178),
      ]
    ];
    _pineDrongopolygon = [
      [
        const MapLatLng(31.781010062583878, 76.99656584173391),
        const MapLatLng(31.781009421892435, 76.9965504999425),
        const MapLatLng(31.781007505988324, 76.99653530590157),
        const MapLatLng(31.78100433332285, 76.99652040593864),
        const MapLatLng(31.78099993445063, 76.99650594354905),
        const MapLatLng(31.780994351735373, 76.99649205801401),
        const MapLatLng(31.7809876389419, 76.99647888305923),
        const MapLatLng(31.780979860718315, 76.99646654556703),
        const MapLatLng(31.780971091973427, 76.99645516435436),
        const MapLatLng(31.78096141715531, 76.9964448490286),
        const MapLatLng(31.780950929438003, 76.99643569893193),
        const MapLatLng(31.780939729824244, 76.99642780218458),
        const MapLatLng(31.780927926172648, 76.99642123483623),
        const MapLatLng(31.78091563215907, 76.99641606013365),
        const MapLatLng(31.780902966181714, 76.99641232791159),
        const MapLatLng(31.780890050221025, 76.99641007411277),
        const MapLatLng(31.780877008664838, 76.99640932044194),
        const MapLatLng(31.780863967110484, 76.99641007415671),
        const MapLatLng(31.78085105115525, 76.99641232799777),
        const MapLatLng(31.78083838518674, 76.99641606025878),
        const MapLatLng(31.78082609118506, 76.99642123499547),
        const MapLatLng(31.78081428754798, 76.99642780237183),
        const MapLatLng(31.780803087950762, 76.99643569913998),
        const MapLatLng(31.780792600251413, 76.99644484924947),
        const MapLatLng(31.780782925451962, 76.99645516457956),
        const MapLatLng(31.780774156725744, 76.9964665457879),
        const MapLatLng(31.78076637852012, 76.99647888326729),
        const MapLatLng(31.780759665743197, 76.99649205820126),
        const MapLatLng(31.780754083042446, 76.99650594370829),
        const MapLatLng(31.780749684182123, 76.99652040606374),
        const MapLatLng(31.7807465115255, 76.99653530598775),
        const MapLatLng(31.780744595626835, 76.99655049998644),
        const MapLatLng(31.780743954937233, 76.99656584173391),
        const MapLatLng(31.780744595626835, 76.99658118348137),
        const MapLatLng(31.7807465115255, 76.99659637748007),
        const MapLatLng(31.780749684182123, 76.99661127740407),
        const MapLatLng(31.780754083042446, 76.99662573975954),
        const MapLatLng(31.780759665743197, 76.99663962526657),
        const MapLatLng(31.78076637852012, 76.99665280020054),
        const MapLatLng(31.780774156725744, 76.99666513767993),
        const MapLatLng(31.780782925451962, 76.99667651888826),
        const MapLatLng(31.780792600251413, 76.99668683421834),
        const MapLatLng(31.780803087950762, 76.99669598432784),
        const MapLatLng(31.78081428754798, 76.996703881096),
        const MapLatLng(31.78082609118506, 76.99671044847234),
        const MapLatLng(31.78083838518674, 76.99671562320904),
        const MapLatLng(31.78085105115525, 76.99671935547005),
        const MapLatLng(31.780863967110484, 76.99672160931111),
        const MapLatLng(31.780877008664838, 76.99672236302588),
        const MapLatLng(31.780890050221025, 76.99672160935505),
        const MapLatLng(31.780902966181714, 76.99671935555624),
        const MapLatLng(31.78091563215907, 76.99671562333415),
        const MapLatLng(31.780927926172648, 76.99671044863159),
        const MapLatLng(31.780939729824244, 76.99670388128324),
        const MapLatLng(31.780950929438003, 76.99669598453589),
        const MapLatLng(31.78096141715531, 76.99668683443922),
        const MapLatLng(31.780971091973427, 76.99667651911346),
        const MapLatLng(31.780979860718315, 76.99666513790079),
        const MapLatLng(31.7809876389419, 76.9966528004086),
        const MapLatLng(31.780994351735373, 76.99663962545381),
        const MapLatLng(31.78099993445063, 76.99662573991877),
        const MapLatLng(31.78100433332285, 76.99661127752918),
        const MapLatLng(31.781007505988324, 76.99659637756625),
        const MapLatLng(31.781009421892435, 76.99658118352532),
        const MapLatLng(31.781010062583878, 76.99656584173391),
      ]
    ];
    _oakpolygon = [
      [
        const MapLatLng(31.78196331034405, 76.99888392954135),
        const MapLatLng(31.78196268848285, 76.99886903849884),
        const MapLatLng(31.781960828888145, 76.99885429086581),
        const MapLatLng(31.781957749468905, 76.99883982867061),
        const MapLatLng(31.78195347988176, 76.99882579119257),
        const MapLatLng(31.781948061245316, 76.99881231362079),
        const MapLatLng(31.781941545744214, 76.99879952575202),
        const MapLatLng(31.781933996126497, 76.99878755074069),
        const MapLatLng(31.781925485099368, 76.9987765039129),
        const MapLatLng(31.781916094628933, 76.99876649165569),
        const MapLatLng(31.781905915150777, 76.9987576103925),
        const MapLatLng(31.78189504469912, 76.99874994565461),
        const MapLatLng(31.781883587962557, 76.99874357125731),
        const MapLatLng(31.781871655275925, 76.99873854858919),
        const MapLatLng(31.781859361557682, 76.9987349260208),
        const MapLatLng(31.781846825203182, 76.99873273843896),
        const MapLatLng(31.78183416694442, 76.99873200691064),
        const MapLatLng(31.7818215086874, 76.99873273848034),
        const MapLatLng(31.781808972338034, 76.998734926102),
        const MapLatLng(31.781796678628126, 76.99873854870707),
        const MapLatLng(31.781784745952706, 76.99874357140733),
        const MapLatLng(31.781773289229804, 76.99874994583101),
        const MapLatLng(31.781762418793736, 76.99875761058851),
        const MapLatLng(31.781752239332505, 76.99876649186376),
        const MapLatLng(31.78174284887966, 76.99877650412506),
        const MapLatLng(31.78173433787012, 76.99878755094878),
        const MapLatLng(31.78172678826932, 76.99879952594803),
        const MapLatLng(31.78172027278381, 76.9988123137972),
        const MapLatLng(31.781714854161027, 76.9988257913426),
        const MapLatLng(31.7817105845851, 76.99883982878848),
        const MapLatLng(31.781707505174193, 76.99885429094701),
        const MapLatLng(31.78170564558462, 76.99886903854024),
        const MapLatLng(31.78170502372515, 76.99888392954135),
        const MapLatLng(31.78170564558462, 76.99889882054248),
        const MapLatLng(31.781707505174193, 76.9989135681357),
        const MapLatLng(31.7817105845851, 76.99892803029424),
        const MapLatLng(31.781714854161027, 76.99894206774013),
        const MapLatLng(31.78172027278381, 76.99895554528553),
        const MapLatLng(31.78172678826932, 76.9989683331347),
        const MapLatLng(31.78173433787012, 76.99898030813395),
        const MapLatLng(31.78174284887966, 76.99899135495765),
        const MapLatLng(31.781752239332505, 76.99900136721895),
        const MapLatLng(31.781762418793736, 76.9990102484942),
        const MapLatLng(31.781773289229804, 76.9990179132517),
        const MapLatLng(31.781784745952706, 76.99902428767538),
        const MapLatLng(31.781796678628126, 76.99902931037566),
        const MapLatLng(31.781808972338034, 76.99903293298071),
        const MapLatLng(31.7818215086874, 76.99903512060239),
        const MapLatLng(31.78183416694442, 76.99903585217207),
        const MapLatLng(31.781846825203182, 76.99903512064377),
        const MapLatLng(31.781859361557682, 76.9990329330619),
        const MapLatLng(31.781871655275925, 76.99902931049353),
        const MapLatLng(31.781883587962557, 76.9990242878254),
        const MapLatLng(31.78189504469912, 76.99901791342812),
        const MapLatLng(31.781905915150777, 76.99901024869021),
        const MapLatLng(31.781916094628933, 76.99900136742704),
        const MapLatLng(31.781925485099368, 76.99899135516982),
        const MapLatLng(31.781933996126497, 76.99898030834204),
        const MapLatLng(31.781941545744214, 76.99896833333071),
        const MapLatLng(31.781948061245316, 76.99895554546194),
        const MapLatLng(31.78195347988176, 76.99894206789014),
        const MapLatLng(31.781957749468905, 76.99892803041212),
        const MapLatLng(31.781960828888145, 76.9989135682169),
        const MapLatLng(31.78196268848285, 76.99889882058388),
        const MapLatLng(31.78196331034405, 76.99888392954135),
      ]
    ];
    _tragopolygon = [
      [
        MapLatLng(31.780659595675733, 76.9967826736297),
        MapLatLng(31.780659084311996, 76.9967704287205),
        MapLatLng(31.78065755514546, 76.99675830173688),
        MapLatLng(31.780655022902913, 76.9967464094687),
        MapLatLng(31.780651511971314, 76.99673486644537),
        MapLatLng(31.780647056162955, 76.9967237838328),
        MapLatLng(31.78064169838985, 76.9967132683629),
        MapLatLng(31.780635490250425, 76.99670342130557),
        MapLatLng(31.780628491532624, 76.99669433749347),
        MapLatLng(31.78062076963809, 76.99668610440871),
        MapLatLng(31.78061239893308, 76.99667880134035),
        MapLatLng(31.78060346003221, 76.99667249862085),
        MapLatLng(31.780594039022127, 76.99666725694863),
        MapLatLng(31.780584226632445, 76.9966631268036),
        MapLatLng(31.78057411736196, 76.996660147961),
        MapLatLng(31.780563808568555, 76.99665834910836),
        MapLatLng(31.78055339953158, 76.99665774756922),
        MapLatLng(31.780542990495775, 76.99665834913635),
        MapLatLng(31.780532681705836, 76.99666014801589),
        MapLatLng(31.780522572440983, 76.99666312688329),
        MapLatLng(31.780512760058894, 76.99666725705008),
        MapLatLng(31.780503339058043, 76.99667249874014),
        MapLatLng(31.780494400167715, 76.9966788014729),
        MapLatLng(31.780486029474147, 76.99668610454941),
        MapLatLng(31.7804783075915, 76.99669433763692),
        MapLatLng(31.7804713088856, 76.99670342144627),
        MapLatLng(31.780465100757613, 76.99671326849544),
        MapLatLng(31.780459742995042, 76.99672378395209),
        MapLatLng(31.780455287195934, 76.9967348665468),
        MapLatLng(31.78045177627191, 76.9967464095484),
        MapLatLng(31.780449244035, 76.99675830179177),
        MapLatLng(31.78044771487194, 76.99677042874849),
        MapLatLng(31.780447203509365, 76.9967826736297),
        MapLatLng(31.78044771487194, 76.9967949185109),
        MapLatLng(31.780449244035, 76.9968070454676),
        MapLatLng(31.78045177627191, 76.99681893771098),
        MapLatLng(31.780455287195934, 76.99683048071259),
        MapLatLng(31.780459742995042, 76.9968415633073),
        MapLatLng(31.780465100757613, 76.99685207876395),
        MapLatLng(31.7804713088856, 76.99686192581312),
        MapLatLng(31.7804783075915, 76.99687100962247),
        MapLatLng(31.780486029474147, 76.99687924270998),
        MapLatLng(31.780494400167715, 76.99688654578648),
        MapLatLng(31.780503339058043, 76.99689284851925),
        MapLatLng(31.780512760058894, 76.99689809020931),
        MapLatLng(31.780522572440983, 76.99690222037609),
        MapLatLng(31.780532681705836, 76.9969051992435),
        MapLatLng(31.780542990495775, 76.99690699812305),
        MapLatLng(31.78055339953158, 76.99690759969018),
        MapLatLng(31.780563808568555, 76.99690699815103),
        MapLatLng(31.78057411736196, 76.9969051992984),
        MapLatLng(31.780584226632445, 76.9969022204558),
        MapLatLng(31.780594039022127, 76.99689809031076),
        MapLatLng(31.78060346003221, 76.99689284863854),
        MapLatLng(31.78061239893308, 76.99688654591903),
        MapLatLng(31.78062076963809, 76.9968792428507),
        MapLatLng(31.780628491532624, 76.99687100976591),
        MapLatLng(31.780635490250425, 76.99686192595381),
        MapLatLng(31.78064169838985, 76.99685207889648),
        MapLatLng(31.780647056162955, 76.99684156342659),
        MapLatLng(31.780651511971314, 76.99683048081403),
        MapLatLng(31.780655022902913, 76.99681893779069),
        MapLatLng(31.78065755514546, 76.9968070455225),
        MapLatLng(31.780659084311996, 76.99679491853888),
        MapLatLng(31.780659595675733, 76.9967826736297)
      ]
    ];
    _redstartpolygon = [
      [
        MapLatLng(31.781835451603328, 76.99885581559346),
        MapLatLng(31.78194910115782, 76.99876803535966),
        MapLatLng(31.781939917360347, 76.99871941861358),
        MapLatLng(31.781906626088286, 76.9986897083815),
        MapLatLng(31.78186529897428, 76.99867080186891),
        MapLatLng(31.781834303627363, 76.99866134861321),
        MapLatLng(31.781818231961637, 76.99865864768293),
        MapLatLng(31.781779200762045, 76.9986802551258),
        MapLatLng(31.781739021568328, 76.9987045634976),
        MapLatLng(31.781835451603328, 76.99885581559346)
      ]
    ];
    _oneBitepolygon=[[MapLatLng(31.78129874617737, 76.99399352127381), MapLatLng(31.781214009443474, 76.99391377515474), MapLatLng(31.78115151605199, 76.9940209340026), MapLatLng(31.781251081774244, 76.99410317218792), MapLatLng(31.781309338263384, 76.99399850540618), MapLatLng(31.78129874617737, 76.99399352127381)]];
    _monalpolygon = [
      [
        MapLatLng(31.781921549763197, 76.99880719884874),
        MapLatLng(31.78168851055804, 76.9989949135022),
        MapLatLng(31.78173328168228, 76.99904758164223),
        MapLatLng(31.781775756831465, 76.99905838536301),
        MapLatLng(31.781813640056257, 76.99905703489793),
        MapLatLng(31.781864150998686, 76.99905568443279),
        MapLatLng(31.781899738237, 76.99903407699128),
        MapLatLng(31.781931881537275, 76.9989949135022),
        MapLatLng(31.78194910115782, 76.9989354930367),
        MapLatLng(31.781952545081467, 76.99888822675581),
        MapLatLng(31.781951397106923, 76.99884501187142),
        MapLatLng(31.781921549763197, 76.99880719884874)
      ]
    ];
    _megastarpolygon=[[MapLatLng(31.78131887114077, 76.99398355300923), MapLatLng(31.781257437029296, 76.99393371168503), MapLatLng(31.781188588407772, 76.99401345780421), MapLatLng(31.781335818474133, 76.99418790243925),
      MapLatLng(31.78141949589009, 76.99409694202251), MapLatLng(31.78131887114077, 76.99398355300923)]];
    _allMesspolygon = [];
    _allMesspolygon.addAll(_alderpolygon);
    _allMesspolygon.addAll(_pineDrongopolygon);
    _allMesspolygon.addAll(_oakpolygon);
    _allMesspolygon.addAll(_tragopolygon);
    _allCanteenpolygon = [];
    _allCanteenpolygon.add(_monalpolygon[0]);
    _allCanteenpolygon.add(_pineDrongopolygon[0]);
    _allCanteenpolygon.add(_tragopolygon[0]);
    _allCanteenpolygon.add(_oneBitepolygon[0]);
    _allStorespolygon = [];
    _allStorespolygon.addAll(_megastarpolygon);
    _allStorespolygon.addAll(_redstartpolygon);

    _zoomPanBehavior = MapZoomPanBehavior(
        focalLatLng: const MapLatLng(31.781945517991204, 76.99733524912105),
        zoomLevel: 16,
        maxZoomLevel: 19,
        minZoomLevel: 15,
        enableDoubleTapZooming: true);

    _controller = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 2),
    );
    _animation = ColorTween(
      begin: Colors.white,
      end: const Color.fromRGBO(161, 201, 149, 0.8),
    ).animate(_controller);
    _controller.repeat(reverse: true);
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  void _handleSelection(
      BuildContext context, String areaName, List<dynamic> data1) {
    Map<String, String> locations ={'Monal' : 'monal', 'Oak' : 'oak mess', 'Alder':'alder mess','Pine':'pine mess','Tulsi':'tragopan / tulsi','OneBite':'one bite','Drongo':'drongo','Redstart':'red start','Tragopan':'tragopan / tulsi', 'Hostels' :'hostel', 'Acad Block': 'Institude', 'Megastar' : 'megastar', 'Staff Residence': 'faculty','Green Areas': 'green'};
    String? loc = locations[areaName];

    Map<String, dynamic> data = {};

    for (dynamic i in data1) {
      if (i['location'] == loc) {
        data = i;
        break;
      }
    }

    double carbonEmission = 0;
    if (data.isNotEmpty) {
      for (String key in data['carbonData'][0]['carbonData'].keys) {
        if (key != 'Date' && key != '_id') {
          carbonEmission += data['carbonData'][0]['carbonData'][key];
        }
      }
    }


    Map<String, String> wordMapper = {

      'paper' : 'Paper & Tree Products',
      'food' : 'Food',
      'gas' : 'Gas' ,
      'others' : 'Other sources',
      'vehicle' : 'Institute Vehicles',
      'electricity' : 'Campus Electricity',
      'consumption' : 'Product Consumption (from outside campus)',
      'offset' : 'Carbon Offset',
      'vehicles': 'Vehicles',
    };

    // showDialog(
    //   context: context,
    //   builder: (context) {
    //     return AnimatedBuilder(
    //         animation: _controller,
    //         builder: (context, child) {
    //           return AlertDialog(
    //             title: Text(areaName),
    //             // Display area name
    //             content: Text(
    //                 "Carbon Emission: ${carbonEmission.toStringAsFixed(3)} kgs"),
    //             // Display additional info
    //             actions: [
    //               TextButton(
    //                 onPressed: () {
    //                   Navigator.of(context).pop();
    //                 },
    //                 child: const Text('Close'),
    //               ),
    //             ],
    //             shape: RoundedRectangleBorder(
    //                 borderRadius: BorderRadius.circular(20),
    //                 side: BorderSide(
    //                     color: _animation.value ?? Colors.transparent,
    //                     width: 7)),
    //           );
    //         });
    //   },
    // );
    showDialog(
      context: context,
      builder: (context) {
        return AnimatedBuilder(
          animation: _controller,
          builder: (context, child) {
            return AlertDialog(
              title: Text(areaName),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    "Total Carbon Emission: ${carbonEmission.toStringAsFixed(3)} kgs",
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 10),
                  Text(
                    "Breakdown:",
                    style: TextStyle(fontWeight: FontWeight.bold),
                  ),
                  SizedBox(height: 5),
                  if (data.isNotEmpty)
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: data['carbonData'][0]['carbonData'].keys
                          .where((key) => key != 'Date' && key != '_id')
                          .map<Widget>((key) {
                        return Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Row(
                            children: [
                              Icon(Icons.circle, size: 6,),
                              Flexible(
                                child: Text(
                                  " ${wordMapper[key]}: ${data['carbonData'][0]['carbonData'][key].toStringAsFixed(3)} kgs",
                                ),
                              ),
                            ],
                          ),
                        );
                      }).toList(),
                    ),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: const Text('Close'),
                ),
              ],
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(20),
                side: BorderSide(
                  color: _animation.value ?? Colors.transparent,
                  width: 7,
                ),
              ),
            );
          },
        );
      },
    );
  }


  Future<void> fetchData() async {
    try {
      String apiUrl = 'https://carbon-campus-server.onrender.com/campus/get-all-data';
      final response = await http.get(
        Uri.parse(apiUrl),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
      );
      if (response.statusCode == 200) {
        setState(() {
          data = jsonDecode(response.body);
        });
      } else {
        throw Exception('Failed to load data: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching data: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        floatingActionButton: FloatingActionButton(
          splashColor: Colors.lightGreen[100],
          backgroundColor: Colors.white,
          onPressed: () {
            _zoomPanBehavior.focalLatLng =
                const MapLatLng(31.781427826285842, 76.99723827872856);
            _zoomPanBehavior.zoomLevel = 16;
          },
          child: const Icon(Icons.gps_fixed),
        ),
        body: Stack(children: [
          Center(
            child: FutureBuilder(
                future: getBingUrlTemplate(
                    'https://dev.virtualearth.net/REST/V1/Imagery/Metadata/Aerial?output=json&uriScheme=https&include=ImageryProviders&key=AmazVXickpg2l59s6jj6lvUo-SuuLlCmGKkXcNzgiSUzWsvO48gR6s-aUlbmp8UF'),
                builder: (context, snapshot) {
                  if (snapshot.hasData) {
                    return RotatedBox(
                        quarterTurns: 3,
                        child: SfMaps(
                          layers: [
                            MapTileLayer(
                              urlTemplate: snapshot.data as String,
                              zoomPanBehavior: _zoomPanBehavior,
                              onWillPan: (MapPanDetails detail) {
                                if (detail.previousVisibleBounds != null) {
                                  final previousBounds =
                                      detail.newVisibleBounds!;
                                  final northeastActual =
                                      previousBounds.northeast;
                                  final southwestActual =
                                      previousBounds.southwest;

                                  if (northeastActual.latitude >
                                          northeast.latitude ||
                                      northeastActual.longitude >
                                          northeast.longitude ||
                                      southwestActual.longitude <
                                          southwest.longitude ||
                                      southwestActual.latitude <
                                          southwest.latitude) {
                                    return false;
                                  }
                                }
                                return true;
                              },
                              sublayers: [
                                MapPolygonLayer.inverted(
                                  polygons: _selectedIndex == 0
                                      ? List<MapPolygon>.generate(_acadAreapolygons.length,
                                          (int index) {
                                          return MapPolygon(
                                              points: _acadAreapolygons[index],
                                              onTap: () {
                                                _handleSelection(context,
                                                    "Acad Block", data);
                                              });
                                        }).toSet()
                                      : _selectedIndex == 1
                                          ? List<MapPolygon>.generate(
                                              _pineDrongopolygon.length,
                                              (int index) {
                                              return MapPolygon(
                                                  points:
                                                      _pineDrongopolygon[index],
                                                  onTap: () {
                                                    _handleSelection(
                                                        context, "Pine", data);
                                                  });
                                            }).toSet()
                                          : _selectedIndex == 2
                                              ? List<MapPolygon>.generate(
                                                  _hostelspolygon.length,
                                                  (int index) {
                                                  return MapPolygon(
                                                      points: _hostelspolygon[
                                                          index],
                                                      onTap: () {
                                                        _handleSelection(
                                                            context,
                                                            "Hostels",
                                                            data);
                                                      });
                                                }).toSet()
                                              : _selectedIndex == 3
                                                  ? List<MapPolygon>.generate(
                                                      _alderpolygon.length,
                                                      (int index) {
                                                      return MapPolygon(
                                                          points: _alderpolygon[
                                                              index],
                                                          onTap: () {
                                                            _handleSelection(
                                                                context,
                                                                "Alder",
                                                                data);
                                                          });
                                                    }).toSet()
                                                  : _selectedIndex == 4
                                                      ? List<MapPolygon>.generate(
                                                          _oakpolygon.length,
                                                          (int index) {
                                                          return MapPolygon(
                                                              points:
                                                                  _oakpolygon[
                                                                      index],
                                                              onTap: () {
                                                                _handleSelection(
                                                                    context,
                                                                    "Oak",
                                                                    data);
                                                              });
                                                        }).toSet()
                                                      : _selectedIndex == 5
                                                          ? List<MapPolygon>.generate(
                                                              _tragopolygon.length,
                                                              (int index) {
                                                              return MapPolygon(
                                                                  points:
                                                                      _tragopolygon[
                                                                          index],
                                                                  onTap: () {
                                                                    _handleSelection(
                                                                        context,
                                                                        "Tragopan",
                                                                        data);
                                                                  });
                                                            }).toSet()
                                                          : _selectedIndex == 6
                                                              ? List<MapPolygon>.generate(
                                                                  _greenpolygon.length,
                                                                  (int index) {
                                                                  return MapPolygon(
                                                                      points: _greenpolygon[
                                                                          index],
                                                                      onTap:
                                                                          () {
                                                                        _handleSelection(
                                                                            context,
                                                                            "Green Areas",
                                                                            data);
                                                                      });
                                                                }).toSet()
                                                              : _selectedIndex == 7
                                                                  ? List<MapPolygon>.generate(_staffpolygon.length, (int index) {
                                                                      return MapPolygon(
                                                                          points: _staffpolygon[
                                                                              index],
                                                                          onTap:
                                                                              () {
                                                                            _handleSelection(
                                                                                context,
                                                                                "Staff Residence",
                                                                                data);
                                                                          });
                                                                    }).toSet()
                                                                  : _selectedIndex == 8
                                                                      ? List<MapPolygon>.generate(_allMesspolygon.length, (int index) {
                                                                          return MapPolygon(
                                                                              points: _allMesspolygon[index]);
                                                                        }).toSet()
                                                                      : _selectedIndex == 9
                                                                          ? List<MapPolygon>.generate(_allCanteenpolygon.length, (int index) {
                                                                              return MapPolygon(points: _allCanteenpolygon[index]);
                                                                            }).toSet()
                                                                          : _selectedIndex == 10
                                                                              ? List<MapPolygon>.generate(_oneBitepolygon.length, (int index) {
                                                                                  return MapPolygon(
                                                                                      points: _megastarpolygon[index],
                                                                                      onTap: () {
                                                                                        _handleSelection(context, "Megastar", data);
                                                                                      });
                                                                                }).toSet()
                                                                              : _selectedIndex == 11
                                                                                  ? List<MapPolygon>.generate(_redstartpolygon.length, (int index) {
                                                                                      return MapPolygon(
                                                                                          points: _redstartpolygon[index],
                                                                                          onTap: () {
                                                                                            _handleSelection(context, "Redstart", data);
                                                                                          });
                                                                                    }).toSet()
                                                                                  : _selectedIndex == 12
                                                                                      ? List<MapPolygon>.generate(_monalpolygon.length, (int index) {
                                                                                          return MapPolygon(
                                                                                              points: _monalpolygon[index],
                                                                                              onTap: () {
                                                                                                _handleSelection(context, "Monal", data);
                                                                                              });
                                                                                        }).toSet()
                                                                                      : _selectedIndex == 13
                                                                                          ? List<MapPolygon>.generate(_pineDrongopolygon.length, (int index) {
                                                                                              return MapPolygon(
                                                                                                  points: _pineDrongopolygon[index],
                                                                                                  onTap: () {
                                                                                                    _handleSelection(context, "Drongo", data);
                                                                                                  });
                                                                                            }).toSet()
                                                                                          : _selectedIndex == 14
                                                                                              ? List<MapPolygon>.generate(_oneBitepolygon.length, (int index) {
                                                                                                  return MapPolygon(
                                                                                                      points: _oneBitepolygon[index],
                                                                                                      onTap: () {
                                                                                                        _handleSelection(context, "OneBite", data);
                                                                                                      });
                                                                                                }).toSet()
                                                                                              : _selectedIndex == 15
                                                                                                  ? List<MapPolygon>.generate(_tragopolygon.length, (int index) {
                                                                                                      return MapPolygon(
                                                                                                          points: _tragopolygon[index],
                                                                                                          onTap: () {
                                                                                                            _handleSelection(context, "Tulsi", data);
                                                                                                          });
                                                                                                    }).toSet()
                                                                                                  : _selectedIndex == 16
                                                                                                      ? List<MapPolygon>.generate(_allStorespolygon.length, (int index) {
                                                                                                          return MapPolygon(
                                                                                                            points: _allStorespolygon[index],
                                                                                                          );
                                                                                                        }).toSet()
                                                                                                      : Set<MapPolygon>(),
                                  color: _selectedIndex == -1
                                      ? Colors.transparent
                                      : Colors.black.withOpacity(0.5),
                                  strokeColor: Colors.red,
                                  strokeWidth: 1,
                                ),
                                MapPolygonLayer(
                                  polygons: _selectedIndex == 8
                                      ? List<MapPolygon>.generate(
                                          _alderpolygon.length, (int index) {
                                          return MapPolygon(
                                              points: _alderpolygon[index]);
                                        }).toSet()
                                      : Set<MapPolygon>(),
                                  color: Colors.transparent,
                                  strokeColor: Colors.red,
                                  tooltipBuilder:
                                      (BuildContext context, int index) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Container(
                                        //decoration: BoxDecoration(borderRadius: BorderRadius.circular(2))
                                        color: Colors.white,
                                        width: 200, height: 120,
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            children: const [
                                              Text("Alder Mess"),
                                              SizedBox(
                                                height: 10,
                                              ),
                                              Row(
                                                children: [
                                                  Icon(
                                                    Icons.info_outline,
                                                  ),
                                                  SizedBox(
                                                    width: 5,
                                                  ),
                                                  Flexible(
                                                      child: Text(
                                                          "Select mess individually to see more info",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.grey)))
                                                ],
                                              ) //Row(children: [Icon(Icons.sele,), SizedBox(width:5,),Flexible(child: Text("Select mess individually to see more info", style: TextStyle(color: Colors.white)))],)
                                            ],
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                                MapPolygonLayer(
                                  polygons: _selectedIndex == 8
                                      ? List<MapPolygon>.generate(
                                          _pineDrongopolygon.length,
                                          (int index) {
                                          return MapPolygon(
                                              points:
                                                  _pineDrongopolygon[index]);
                                        }).toSet()
                                      : Set<MapPolygon>(),
                                  color: Colors.transparent,
                                  strokeColor: Colors.red,
                                  tooltipBuilder:
                                      (BuildContext context, int index) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Container(
                                        //decoration: BoxDecoration(borderRadius: BorderRadius.circular(2)),
                                        color: Colors.white,
                                        width: 200, height: 120,
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            children: const [
                                              Text('Pine Mess'),
                                              SizedBox(
                                                height: 10,
                                              ),
                                              Row(
                                                children: [
                                                  Icon(
                                                    Icons.info_outline,
                                                  ),
                                                  SizedBox(
                                                    width: 5,
                                                  ),
                                                  Flexible(
                                                      child: Text(
                                                          "Select mess individually to see more info",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.grey)))
                                                ],
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                                MapPolygonLayer(
                                  polygons: _selectedIndex == 8
                                      ? List<MapPolygon>.generate(
                                          _oakpolygon.length, (int index) {
                                          return MapPolygon(
                                              points: _oakpolygon[index]);
                                        }).toSet()
                                      : Set<MapPolygon>(),
                                  color: Colors.transparent,
                                  strokeColor: Colors.red,
                                  tooltipBuilder:
                                      (BuildContext context, int index) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Container(
                                        //decoration: BoxDecoration(borderRadius: BorderRadius.circular(2)),
                                        color: Colors.white,
                                        width: 200, height: 120,
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            children: const [
                                              Text('Oak Mess'),
                                              SizedBox(
                                                height: 10,
                                              ),
                                              Row(
                                                children: [
                                                  Icon(
                                                    Icons.info_outline,
                                                  ),
                                                  SizedBox(
                                                    width: 5,
                                                  ),
                                                  Flexible(
                                                      child: Text(
                                                          "Select mess individually to see more info",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.grey)))
                                                ],
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                                MapPolygonLayer(
                                  polygons: _selectedIndex == 8
                                      ? List<MapPolygon>.generate(
                                          _tragopolygon.length, (int index) {
                                          return MapPolygon(
                                            points: _tragopolygon[index],
                                          );
                                        }).toSet()
                                      : Set<MapPolygon>(),
                                  color: Colors.transparent,
                                  strokeColor: Colors.red,
                                  tooltipBuilder:
                                      (BuildContext context, int index) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Container(
                                        //decoration: BoxDecoration(borderRadius: BorderRadius.circular(2)),
                                        color: Colors.white,
                                        width: 200, height: 120,
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            children: const [
                                              Text('Tulsi Mess'),
                                              SizedBox(
                                                height: 10,
                                              ),
                                              Row(
                                                children: [
                                                  Icon(
                                                    Icons.info_outline,
                                                  ),
                                                  SizedBox(
                                                    width: 5,
                                                  ),
                                                  Flexible(
                                                      child: Text(
                                                          "Select mess individually to see more info",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.grey)))
                                                ],
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                                MapPolygonLayer(
                                  polygons: _selectedIndex == 9
                                      ? List<MapPolygon>.generate(
                                          _oneBitepolygon.length,
                                          (int index) {
                                          return MapPolygon(
                                              points: _oneBitepolygon[
                                                  index]);
                                        }).toSet()
                                      : Set<MapPolygon>(),
                                  color: Colors.transparent,
                                  strokeColor: Colors.red,
                                  tooltipBuilder:
                                      (BuildContext context, int index) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Container(
                                        //decoration: BoxDecoration(borderRadius: BorderRadius.circular(2)),
                                        color: Color.fromRGBO(255, 247, 220, 1),
                                        width: 200, height: 110,
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            children: const [
                                              Text('OneBite'),
                                              SizedBox(
                                                height: 10,
                                              ),
                                              Row(
                                                children: [
                                                  Icon(
                                                    Icons.info_outline,
                                                  ),
                                                  SizedBox(
                                                    width: 5,
                                                  ),
                                                  Flexible(
                                                      child: Text(
                                                          "Select canteen individually to see more info",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.grey)))
                                                ],
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                                MapPolygonLayer(
                                  polygons: _selectedIndex == 9
                                      ? List<MapPolygon>.generate(
                                          _pineDrongopolygon.length,
                                          (int index) {
                                          return MapPolygon(
                                              points:
                                                  _pineDrongopolygon[index]);
                                        }).toSet()
                                      : Set<MapPolygon>(),
                                  color: Colors.transparent,
                                  strokeColor: Colors.red,
                                  tooltipBuilder:
                                      (BuildContext context, int index) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Container(
                                        //decoration: BoxDecoration(borderRadius: BorderRadius.circular(2)),
                                        color: Color.fromRGBO(255, 247, 220, 1),
                                        width: 200, height: 110,
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            children: const [
                                              Text('Drongo Canteen'),
                                              SizedBox(
                                                height: 10,
                                              ),
                                              Row(
                                                children: [
                                                  Icon(
                                                    Icons.info_outline,
                                                  ),
                                                  SizedBox(
                                                    width: 5,
                                                  ),
                                                  Flexible(
                                                      child: Text(
                                                          "Select canteen individually to see more info",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.grey)))
                                                ],
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                                MapPolygonLayer(
                                  polygons: _selectedIndex == 9
                                      ? List<MapPolygon>.generate(
                                          _monalpolygon.length, (int index) {
                                          return MapPolygon(
                                              points: _monalpolygon[index]);
                                        }).toSet()
                                      : Set<MapPolygon>(),
                                  color: Colors.transparent,
                                  strokeColor: Colors.red,
                                  tooltipBuilder:
                                      (BuildContext context, int index) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Container(
                                        //decoration: BoxDecoration(borderRadius: BorderRadius.circular(2)),
                                        color: Color.fromRGBO(255, 247, 220, 1),
                                        width: 200, height: 110,
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            children: const [
                                              Text('Monal Canteen'),
                                              SizedBox(
                                                height: 10,
                                              ),
                                              Row(
                                                children: [
                                                  Icon(
                                                    Icons.info_outline,
                                                  ),
                                                  SizedBox(
                                                    width: 5,
                                                  ),
                                                  Flexible(
                                                      child: Text(
                                                          "Select canteen individually to see more info",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.grey)))
                                                ],
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                                MapPolygonLayer(
                                  polygons: _selectedIndex == 9
                                      ? List<MapPolygon>.generate(
                                          _tragopolygon.length, (int index) {
                                          return MapPolygon(
                                              points: _tragopolygon[index],
                                              onTap: () {
                                                const SnackBar(
                                                  duration:
                                                      Duration(seconds: 2),
                                                  content: Row(
                                                    children: [
                                                      Icon(
                                                        Icons.info,
                                                        color: Colors.yellow,
                                                      ),
                                                      Text(
                                                          "Select a canteen to show more info ")
                                                    ],
                                                  ),
                                                );
                                              });
                                        }).toSet()
                                      : Set<MapPolygon>(),
                                  color: Colors.transparent,
                                  strokeColor: Colors.red,
                                  tooltipBuilder:
                                      (BuildContext context, int index) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Container(
                                        //decoration: BoxDecoration(borderRadius: BorderRadius.circular(2)),
                                        color: Color.fromRGBO(255, 247, 220, 1),
                                        width: 200, height: 110,
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            children: const [
                                              Text('Tragopan Canteen'),
                                              SizedBox(
                                                height: 10,
                                              ),
                                              Row(
                                                children: [
                                                  Icon(
                                                    Icons.info_outline,
                                                  ),
                                                  SizedBox(
                                                    width: 5,
                                                  ),
                                                  Flexible(
                                                      child: Text(
                                                          "Select canteen individually to see more info",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.grey)))
                                                ],
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                                MapPolygonLayer(
                                  polygons: _selectedIndex == 16
                                      ? List<MapPolygon>.generate(
                                          _redstartpolygon.length, (int index) {
                                          return MapPolygon(
                                            points: _redstartpolygon[index],
                                          );
                                        }).toSet()
                                      : Set<MapPolygon>(),
                                  color: Colors.transparent,
                                  strokeColor: Colors.red,
                                  tooltipBuilder:
                                      (BuildContext context, int index) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Container(
                                        //decoration: BoxDecoration(borderRadius: BorderRadius.circular(2)),
                                        color: Color.fromRGBO(255, 247, 220, 1),
                                        width: 200, height: 110,
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            children: const [
                                              Text('Redstart'),
                                              SizedBox(
                                                height: 10,
                                              ),
                                              Row(
                                                children: [
                                                  Icon(
                                                    Icons.info_outline,
                                                  ),
                                                  SizedBox(
                                                    width: 5,
                                                  ),
                                                  Flexible(
                                                      child: Text(
                                                          "Select store individually to see more info",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.grey)))
                                                ],
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                                MapPolygonLayer(
                                  polygons: _selectedIndex == 16
                                      ? List<MapPolygon>.generate(
                                          _megastarpolygon.length,
                                          (int index) {
                                          return MapPolygon(
                                            points:
                                                _megastarpolygon[index],
                                          );
                                        }).toSet()
                                      : Set<MapPolygon>(),
                                  color: Colors.transparent,
                                  strokeColor: Colors.red,
                                  tooltipBuilder:
                                      (BuildContext context, int index) {
                                    return RotatedBox(
                                      quarterTurns: 1,
                                      child: Container(
                                        //decoration: BoxDecoration(borderRadius: BorderRadius.circular(2)),
                                        color: Color.fromRGBO(255, 247, 220, 1),
                                        width: 200, height: 110,
                                        child: Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Column(
                                            children: const [
                                              Text('Megastar'),
                                              SizedBox(
                                                height: 10,
                                              ),
                                              Row(
                                                children: [
                                                  Icon(
                                                    Icons.info_outline,
                                                  ),
                                                  SizedBox(
                                                    width: 5,
                                                  ),
                                                  Flexible(
                                                      child: Text(
                                                          "Select store individually to see more info",
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.grey)))
                                                ],
                                              )
                                            ],
                                          ),
                                        ),
                                      ),
                                    );
                                  },
                                ),
                              ],
                            )
                          ],
                        ));
                  }
                  return Center(
                    child: Lottie.asset('lib/assets/twodots.json',
                        width: 200, height: 200),
                  );
                }),
          ),
          Positioned(
            bottom: 92,
            right: 17,
            child: FloatingActionButton(
              splashColor: Colors.lightGreen[100],
              onPressed: () {
                setState(() {
                  _selectedIndex = -1;
                  pressedList = List.filled(17, false);
                  showCanteenBar = showMessBar = false;
                });
              },
              backgroundColor: Colors.white,
              child: Icon(Icons.deselect_outlined),
            ),
          ),
          Column(
            children: [
              Padding(
                padding: const EdgeInsets.only(top: 75.0),
                child: SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: Row(
                      children: [
                        const SizedBox(width: 19),
                        ElevatedButton(
                            onPressed: () {
                              pressedList = List.filled(17, false);
                              setState(
                                () {
                                  showCanteenBar = false;
                                  showStoresBar = false;
                                  if (_selectedIndex != 8 &&
                                      _selectedIndex != 1 &&
                                      _selectedIndex != 3 &&
                                      _selectedIndex != 4 &&
                                      _selectedIndex != 15) {
                                    if (_selectedIndex != -1) {
                                      pressedList[_selectedIndex] = false;
                                    }
                                    _selectedIndex = 8;
                                    pressedList[_selectedIndex] = true;
                                    _zoomPanBehavior.focalLatLng =
                                        const MapLatLng(31.780877774991573,
                                            76.99838638284372);
                                    _zoomPanBehavior.zoomLevel = 17.1;
                                    showMessBar = true;
                                  } else {
                                    //pressedList[8]=false;
                                    _selectedIndex = -1;
                                    _zoomPanBehavior.focalLatLng =
                                        const MapLatLng(31.781427826285842,
                                            76.99723827872856);
                                    _zoomPanBehavior.zoomLevel = 16;
                                    showMessBar = false;
                                  }
                                },
                              );
                            },
                            style: ElevatedButton.styleFrom(
                                minimumSize: Size(40, 30),
                                backgroundColor: pressedList[8] ||
                                        pressedList[1] ||
                                        pressedList[3] ||
                                        pressedList[4] ||
                                        pressedList[15]
                                    ? Colors.lightGreen[100]
                                    : Colors.white),
                            child: const Row(
                              children: [
                                Text(
                                  "Mess",
                                  style: TextStyle(color: Colors.black),
                                ),
                                Icon(
                                  Icons.food_bank_outlined,
                                  color: Colors.blueGrey,
                                )
                              ],
                            )),
                        const SizedBox(width: 7),
                        ElevatedButton(
                            onPressed: () {
                              pressedList = List.filled(17, false);
                              setState(() {
                                showMessBar = false;
                                showStoresBar = false;
                                if (_selectedIndex != 9 &&
                                    _selectedIndex != 5 &&
                                    _selectedIndex != 10 &&
                                    _selectedIndex != 12 &&
                                    _selectedIndex != 13) {
                                  if (_selectedIndex != -1) {
                                    pressedList[_selectedIndex] = false;
                                  }
                                  _selectedIndex = 9;
                                  pressedList[_selectedIndex] = true;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.780813374562314,
                                          76.99732575588051);
                                  _zoomPanBehavior.zoomLevel = 16.9;
                                  showCanteenBar = true;
                                } else {
                                  // pressedList[9]=false;
                                  _selectedIndex = -1;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.781427826285842,
                                          76.99723827872856);
                                  _zoomPanBehavior.zoomLevel = 16;
                                  showCanteenBar = false;
                                }
                              });
                            },
                            style: ElevatedButton.styleFrom(
                                minimumSize: Size(40, 30),
                                backgroundColor: pressedList[9] ||
                                        pressedList[5] ||
                                        pressedList[10] ||
                                        pressedList[11] ||
                                        pressedList[12] ||
                                        pressedList[13]
                                    ? Colors.lightGreen[100]
                                    : Colors.white),
                            child: const Row(
                              children: [
                                Text(
                                  "Canteens",
                                  style: TextStyle(color: Colors.black),
                                ),
                                Icon(
                                  Icons.fastfood_outlined,
                                  color: Colors.blueGrey,
                                )
                              ],
                            )),
                        const SizedBox(width: 7),
                        ElevatedButton(
                            onPressed: () {
                              pressedList = List.filled(17, false);
                              setState(() {
                                showMessBar = false;
                                showCanteenBar = false;
                                if (_selectedIndex != 16 &&
                                    _selectedIndex != 11 &&
                                    _selectedIndex != 10) {
                                  if (_selectedIndex != -1) {
                                    pressedList[_selectedIndex] = false;
                                  }
                                  _selectedIndex = 16;
                                  pressedList[_selectedIndex] = true;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.781313374562314,
                                          76.99732575588051);
                                  _zoomPanBehavior.zoomLevel = 16.9;
                                  showStoresBar = true;
                                } else {
                                  // pressedList[9]=false;
                                  _selectedIndex = -1;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.781427826285842,
                                          76.99723827872856);
                                  _zoomPanBehavior.zoomLevel = 16;
                                  showStoresBar = false;
                                }
                              });
                            },
                            style: ElevatedButton.styleFrom(
                                minimumSize: Size(40, 30),
                                backgroundColor: pressedList[16] ||
                                        pressedList[10] ||
                                        pressedList[11]
                                    ? Colors.lightGreen[100]
                                    : Colors.white),
                            child: const Row(
                              children: [
                                Text(
                                  "Stores",
                                  style: TextStyle(color: Colors.black),
                                ),
                                Icon(
                                  Icons.shopping_cart_outlined,
                                  color: Colors.blueGrey,
                                )
                              ],
                            )),
                        const SizedBox(width: 7),
                        ElevatedButton(
                            onPressed: () {
                              pressedList = List.filled(17, false);
                              setState(() {
                                showMessBar = false;
                                showCanteenBar = false;
                                showStoresBar = false;
                                if (_selectedIndex != 0) {
                                  if (_selectedIndex != -1) {
                                    pressedList[_selectedIndex] = false;
                                  }
                                  _selectedIndex = 0;
                                  pressedList[_selectedIndex] = true;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.780670495194865,
                                          76.99747450422636);
                                  _zoomPanBehavior.zoomLevel = 17.1;
                                } else {
                                  // pressedList[_selectedIndex]=false;
                                  _selectedIndex = -1;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.781427826285842,
                                          76.99723827872856);
                                  _zoomPanBehavior.zoomLevel = 16;
                                }
                              });
                            },
                            style: ElevatedButton.styleFrom(
                                minimumSize: Size(40, 30),
                                backgroundColor: pressedList[0]
                                    ? Colors.lightGreen[100]
                                    : Colors.white),
                            child: const Row(
                              children: [
                                Text(
                                  "Academic Area",
                                  style: TextStyle(color: Colors.black),
                                ),
                                Icon(
                                  Icons.school_outlined,
                                  color: Colors.blueGrey,
                                )
                              ],
                            )),
                        const SizedBox(width: 7),
                        ElevatedButton(
                            onPressed: () {
                              pressedList = List.filled(17, false);
                              showMessBar = false;
                              showCanteenBar = false;
                              showStoresBar = false;
                              setState(() {
                                if (_selectedIndex != 2) {
                                  if (_selectedIndex != -1) {
                                    pressedList[_selectedIndex] = false;
                                  }
                                  _selectedIndex = 2;
                                  pressedList[_selectedIndex] = true;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.781244231439388,
                                          76.99749475212616);
                                  _zoomPanBehavior.zoomLevel = 17.1;
                                } else {
                                  // pressedList[_selectedIndex]=false;
                                  _selectedIndex = -1;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.781427826285842,
                                          76.99723827872856);
                                  _zoomPanBehavior.zoomLevel = 16;
                                }
                              });
                            },
                            style: ElevatedButton.styleFrom(
                                minimumSize: Size(40, 30),
                                backgroundColor: pressedList[2]
                                    ? Colors.lightGreen[100]
                                    : Colors.white),
                            child: const Row(
                              children: [
                                Text(
                                  "Hostels",
                                  style: TextStyle(color: Colors.black),
                                ),
                                Icon(
                                  Icons.apartment_outlined,
                                  color: Colors.blueGrey,
                                )
                              ],
                            )),
                        const SizedBox(width: 7),
                        ElevatedButton(
                            onPressed: () {
                              pressedList = List.filled(17, false);
                              setState(() {
                                showMessBar = false;
                                showCanteenBar = false;
                                showStoresBar = false;
                                if (_selectedIndex != 6) {
                                  if (_selectedIndex != -1) {
                                    pressedList[_selectedIndex] = false;
                                  }
                                  _selectedIndex = 6;
                                  pressedList[_selectedIndex] = true;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(
                                          31.778794352792797, 76.997083044832);
                                  _zoomPanBehavior.zoomLevel = 16.1;
                                } else {
                                  // pressedList[_selectedIndex]=false;
                                  _selectedIndex = -1;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.781427826285842,
                                          76.99723827872856);
                                  _zoomPanBehavior.zoomLevel = 16;
                                }
                              });
                            },
                            style: ElevatedButton.styleFrom(
                                minimumSize: Size(40, 30),
                                backgroundColor: pressedList[6]
                                    ? Colors.lightGreen[100]
                                    : Colors.white),
                            child: const Row(
                              children: [
                                Text(
                                  "Green Area",
                                  style: TextStyle(color: Colors.black),
                                ),
                                Icon(
                                  Icons.eco_outlined,
                                  color: Colors.blueGrey,
                                )
                              ],
                            )),
                        const SizedBox(width: 7),
                        ElevatedButton(
                            onPressed: () {
                              pressedList = List.filled(17, false);
                              setState(() {
                                showMessBar = false;
                                showCanteenBar = false;
                                showStoresBar = false;
                                if (_selectedIndex != 7) {
                                  if (_selectedIndex != -1) {
                                    pressedList[_selectedIndex] = false;
                                  }
                                  _selectedIndex = 7;
                                  pressedList[_selectedIndex] = true;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.782242524024593,
                                          76.99698180536444);
                                  _zoomPanBehavior.zoomLevel = 17;
                                } else {
                                  // pressedList[_selectedIndex]=false;
                                  _selectedIndex = -1;
                                  _zoomPanBehavior.focalLatLng =
                                      const MapLatLng(31.781427826285842,
                                          76.99723827872856);
                                  _zoomPanBehavior.zoomLevel = 16;
                                }
                              });
                            },
                            style: ElevatedButton.styleFrom(
                                minimumSize: Size(40, 30),
                                backgroundColor: pressedList[7]
                                    ? Colors.lightGreen[100]
                                    : Colors.white),
                            child: const Row(
                              children: [
                                Text(
                                  "Staff",
                                  style: TextStyle(color: Colors.black),
                                ),
                                Icon(
                                  Icons.person_2_outlined,
                                  color: Colors.blueGrey,
                                )
                              ],
                            )),
                        const SizedBox(width: 19),
                      ],
                    )),
              ),
              Visibility(
                visible: showMessBar,
                child: AnimatedButtonBar(
                  curve: Curves.easeInOut,
                  innerVerticalPadding: 10,
                  foregroundColor: Colors.blueGrey[400],
                  backgroundColor: Colors.white,
                  radius: 8,
                  padding: const EdgeInsets.only(right: 8, left: 8, top: 12),
                  invertedSelection: true,
                  children: [
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 8;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.780877774991573, 76.99838638284372);
                          _zoomPanBehavior.zoomLevel = 17.1;
                        },
                        child: Text('All')),
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 3;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.78141181218814, 77.00005721253851);
                          _zoomPanBehavior.zoomLevel = 17.6;
                        },
                        child: Text('Alder')),
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 1;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.780850777940405, 76.99666240676466);
                          _zoomPanBehavior.zoomLevel = 17.6;
                        },
                        child: Text('Pine')),
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 4;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.78181991862874, 76.99893639088104);
                          _zoomPanBehavior.zoomLevel = 17.6;
                        },
                        child: Text('Oak')),
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 15;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.78052393180791, 76.99680616067006);
                          _zoomPanBehavior.zoomLevel = 17.6;
                        },
                        child: Text('Tulsi')),
                  ],
                ),
              ),
              Visibility(
                visible: showCanteenBar,
                child: AnimatedButtonBar(
                  innerVerticalPadding: 10,
                  foregroundColor: Colors.blueGrey[400],
                  backgroundColor: Colors.white,
                  radius: 8,
                  padding: const EdgeInsets.only(right: 8, left: 8, top: 12),
                  invertedSelection: true,
                  children: [
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 9;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.780813374562314, 76.99732575588051);
                          _zoomPanBehavior.zoomLevel = 17;
                        },
                        child: Text('All')),
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 14;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.7815382527793, 76.9941136132948);
                          _zoomPanBehavior.zoomLevel = 17.6;
                        },
                        child: Text('OneBite')),
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 13;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.780821411016206, 76.99660052196583);
                          _zoomPanBehavior.zoomLevel = 17.6;
                        },
                        child: Text('Drongo')),
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 12;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.78179661394734, 76.9989150473192);
                          _zoomPanBehavior.zoomLevel = 17.6;
                        },
                        child: Text('Monal')),
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 5;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.78055997276721, 76.99679599150122);
                          _zoomPanBehavior.zoomLevel = 17.6;
                        },
                        child: Text('Trago')),
                  ],
                ),
              ),
              Visibility(
                visible: showStoresBar,
                child: AnimatedButtonBar(
                  innerVerticalPadding: 10,
                  foregroundColor: Colors.blueGrey[400],
                  backgroundColor: Colors.white,
                  radius: 8,
                  padding: const EdgeInsets.only(right: 8, left: 8, top: 12),
                  invertedSelection: true,
                  children: [
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 16;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.780813374562314, 76.99732575588051);
                          _zoomPanBehavior.zoomLevel = 17;
                        },
                        child: Text('All')),
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 10;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.7815382527793, 76.9941136132948);
                          _zoomPanBehavior.zoomLevel = 17.6;
                        },
                        child: Text('Megastar')),
                    ButtonBarEntry(
                        onTap: () {
                          setState(() {
                            _selectedIndex = 11;
                          });
                          _zoomPanBehavior.focalLatLng = const MapLatLng(
                              31.78179661394734, 76.9989150473192);
                          _zoomPanBehavior.zoomLevel = 17.6;
                        },
                        child: Text('Redstart')),
                  ],
                ),
              ),
            ],
          ),
          if (_selectedIndex != -1 &&
              _selectedIndex != 8 &&
              _selectedIndex != 9 &&
              _selectedIndex != 16)
            Positioned(
                left: 10.0,
                bottom: 20.0,
                child: Container(
                  width: 260,
                  height: 50,
                  padding: const EdgeInsets.all(4.0),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(8),
                    color: const Color.fromRGBO(0, 0, 0, 0.5),
                  ),
                  child: const Row(
                    children: [
                      Icon(
                        Icons.info_outline,
                        color: Colors.blueGrey,
                      ),
                      SizedBox(
                        width: 5,
                      ),
                      Flexible(
                          child: Text(
                        "Click highlighted area to display more information",
                        style: TextStyle(color: CupertinoColors.systemGrey3),
                      )),
                    ],
                  ),
                )),
        ] //stack ki children list
            ));
  }
}
